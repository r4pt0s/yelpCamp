const express    = require("express"),
      crypto     = require("crypto"),
      async      = require("async"),
      nodemailer = require("nodemailer");      

const User= require("../models/user");
const router= express.Router();


//Password recovery
router.get("/forgot", (req, res) => {
	res.render("forgot");
});

router.post("/forgot", (req, res, next) => {
	async.waterfall([
		function(done){
			crypto.randomBytes(20, (err,buff) => {
				let token= buff.toString('hex');
				done(err, token);
			});
		},
		function(token, done){
			User.findOne({email: req.body.email}, (err, foundUser) => {
				if(!foundUser){
					req.flash("error", "Wrong Email");
					res.redirect('/forgot');
				}
				foundUser.resetPasswordToken= token;
				foundUser.resetPasswordExpires= Date.now()+3600000;// +1 Hour
				
				foundUser.save((err) => {
					done(err, token, foundUser);
				});
			});
		},
		function(token, user, done){
			const smtpTransport= nodemailer.createTransport({
				service: 'Gmail',
				auth: {
					user: process.env.NODEMAILER_EMAIL,
					pass: process.env.NODEMAILER_PASS
				}
			});
			
			const mailOptions= {
				to: user.email,
				from: 'r4pt0s@gmail.com',
				subject: 'YelpCamp Password Recovery',
				text: `You are receiving this email because you (or someone else) have requested the reset of the password
					  Please Click the following link below, or copy and paste it into your browser to reset your password
					  \n\n http://${req.headers.host}/reset/${token}  \n\n
					  If you did not request this, please ignore this mail and your password  will remain unchanged`
			};

			smtpTransport.sendMail(mailOptions, (err) => {
				console.log('mail sent');
				req.flash("success", `Email has been sent to ${user.email} with further instructions`);
				done(err, 'done');
			});
		}
	],function(err) {
		if(err) return next(err);
		res.redirect('/forgot');
	});
});

router.get("/reset/:token", (req, res) => {
	User.findOne({
		resetPasswordToken: req.params.token, 
		resetPasswordExpires: { $gt: Date.now() }
	}, (err, foundUser) => {
		if(!foundUser){
			req.flash("error", "Password reset token is invalid or has expired!");
			return res.redirect("/forgot");
		}
		res.render('reset', {token: req.params.token});
	});
});

router.post("/reset/:token", (req, res) => {
	async.waterfall([
		function(done){
			User.findOne({
				resetPasswordToken: req.params.token,
				resetPasswordExpires: { $gt: Date.now()}
			}, (err, foundUser) => {
				if(!foundUser){
					req.flash("error", "Token is invalid or has expired");
					return res.redirect("back");
				}
				if(req.body.newPassword === req.body.confirmPassword){
					foundUser.setPassword(req.body.newPassword, (err) => {
						foundUser.resetPasswordToken= undefined;
						foundUser.resetPasswordExpires= undefined;

						foundUser.save((err) => {
							req.logIn(foundUser, (err) => {
								done(err, foundUser);
							});
						});
					});
				}else{
					req.flash("error", "Passwords do not match");
					return res.redirect("back");
				}
			});
		},
		function(user, done){
			const smtpTransport= nodemailer.createTransport({
				service: 'Gmail',
				auth: {
					user: process.env.NODEMAILER_EMAIL,
					pass: process.env.NODEMAILER_PASS
				}
			});
			
			const mailOptions= {
				to: user.email,
				from: 'r4pt0s@gmail.com',
				subject: 'Your password has been changed for YelpCamp',
				text: `You reseted your password successfully. Have fun at
					  \n\n http://${req.headers.host}/login  \n\n`
			};

			smtpTransport.sendMail(mailOptions, (err) => {
				console.log('mail sent');
				req.flash("success", `Success!! Your password has been changed ${user.username}`);
				done(err, 'done');
			});
		}

	], function(err){
		res.redirect("/campgrounds");
	});
	
});

module.exports= router;